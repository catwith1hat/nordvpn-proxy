#!/usr/bin/env bash
set -e -u -o pipefail

#
# First script to start
# prepare openvpn + other services
# start openvpn
# when started and ok, default route through eth0 is removed, crond, unbound, tinyproxy and dante are started.
#
#
#Variables

[[ -f /etc/service/utils.sh ]] && source /etc/service/utils.sh || true
nbFiles=0
waitSec=30
DEBUG=${DEBUG:-0}
OPENVPN_LOGLEVEL=${OPENVPN_LOGLEVEL:-0}
OPENVPN_PARAMETERS=${OPENVPN_PARAMETERS:-""}
#OPENVPN_PARAMETERS+=""
SOCKET="/run/openvpn.sock"

NORDVPN_PROTOCOL=${NORDVPN_PROTOCOL:-UDP}
export NORDVPN_PROTOCOL

NORDVPN_CATEGORY=${NORDVPN_CATEGORY:-P2P}
export NORDVPN_CATEGORY

VPN_PROVIDER_HOME=/etc/service/openvpn/nordvpn
export VPN_PROVIDER_HOME

# Create a tun device see: https://www.kernel.org/doc/Documentation/networking/tuntap.txt
if [ ! -c /dev/net/tun ]; then
    log "OVPN: Creating tun interface /dev/net/tun"
    mkdir -p /dev/net
    mknod /dev/net/tun c 10 200
    chmod 600 /dev/net/tun
fi

${VPN_PROVIDER_HOME}/configure-openvpn.sh
nbFiles=$(ls -1 ${VPN_PROVIDER_HOME}/*.ovpn | grep -c ovpn)
confFile=$(ls -1 ${VPN_PROVIDER_HOME}/*.ovpn | grep -v default.ovpn)
log "OVPN: ########################################################"
log "OVPN: Files found: $nbFiles"
log "OVPN: config: $confFile"
log "OVPN: openvpn log level: ${OPENVPN_LOGLEVEL}"
log "OVPN: ########################################################"

if [[ ${nbFiles} -eq 0 ]]; then
    fatal_error "OVPN: No OpenVPN config found in ${VPN_PROVIDER_HOME}/. Exiting."
fi

## Update ping options to exit the container, so Docker will restart it
sed -i "s/^ping.*//g" "$confFile"
# Add new ones
echo "inactive 3600" >>"$confFile"
echo "ping 10" >>"$confFile"
echo "ping-exit 60" >>"$confFile"
echo -e "management ${SOCKET} unix\nscript-security 2\n--up /etc/service/openvpn/up.sh\n--down /etc/service/openvpn/down.sh" >>"$confFile"
[[ -n ${OPENVPN_LOGLEVEL} ]] && OPENVPN_PARAMETERS=${OPENVPN_PARAMETERS}" --verb ${OPENVPN_LOGLEVEL}" #sed -i "s/verb.*/verb ${OPENVPN_LOGLEVEL}/g" ${destConf}

#Use secrets if present
set +x
if [ -e /run/secrets/NORDVPN_CREDS ]; then
    mapfile -t -n 2 vars </run/secrets/NORDVPN_CREDS
    if [[ ${#vars[*]} -ne 2 ]] || [[ ${vars[0]} == ${vars[1]} ]]; then
        fatal_error "OVPN: openVPN login and password are identical. Exiting"
    fi
    NORDVPN_LOGIN=${vars[0]}
    NORDVPN_PASS=${vars[1]}
fi

# check for unset login/pass
if [ -z ${NORDVPN_LOGIN} ] || [ -z ${NORDVPN_PASS} ] || [[ "${NORDVPN_LOGIN}" == "**None**" ]] || [[ "${NORDVPN_PASS}" == "**None**" ]]; then
    fatal_error "OVPN: OpenVPN credentials not set. Exiting."
else
    log "OVPN: Found existing OPENVPN credentials at /config/openvpn-credentials.txt"
fi

# add OpenVPN user/pass
log "OVPN: Setting OpenVPN credentials..."
mkdir -p /config
echo -e "${NORDVPN_LOGIN}\n${NORDVPN_PASS}" >/config/openvpn-credentials.txt
chmod 600 /config/openvpn-credentials.txt
sed -i "s#auth-user-pass.*#auth-user-pass /config/openvpn-credentials.txt#g" "${confFile}"

# check OpenVPN user/pass
if [[ ! -f /config/openvpn-credentials.txt ]]; then
    fatal_error "OVPN: OpenVPN credentials not set. Exiting."
fi

if [[ $DEBUG -eq 1 ]]; then
    log "OVPN: route"
    route -n
    log "OVPN: ${confFile}"
    cat ${confFile}
    log "OVPN: OPENVPN_PARAMETERS: ${OPENVPN_PARAMETERS}"
fi
eval $(/sbin/ip route list match 0.0.0.0 | awk '{if($5!="tun0"){print "GW="$3"\nINT="$5; exit}}')
if [[ -n ${LOCAL_NETWORK:-""} ]]; then
    log "OVPN: LOCAL_NETWORK: ${LOCAL_NETWORK}, Gateway: ${GW}, device ${INT}"
    if [[ -n ${GW:-""} ]] && [[ -n ${INT:-""} ]]; then
        for localNet in ${LOCAL_NETWORK//,/ }; do
            echo "adding route to local network ${localNet} via ${GW} dev ${INT}"
            /sbin/ip route add "${localNet}" via "${GW}" dev "${INT}"
        done
    fi
fi

openvpn --config ${confFile} ${OPENVPN_PARAMETERS}

log "OVPN: VPN connection lost, stopping unbound"
log "OVPN: Waiting ${waitSec} seconds before restarting"
sleep ${waitSec}
