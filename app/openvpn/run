#!/usr/bin/env bash
set -e -u -o pipefail

nbFiles=0
waitSec=30
DEBUG=${DEBUG:-0}
OPENVPN_LOGLEVEL=${OPENVPN_LOGLEVEL:-0}
OPENVPN_PARAMETERS=${OPENVPN_PARAMETERS:-""}
SOCKET="/run/openvpn.sock"

#Variables
. /etc/service/date.sh --source-only
[[ -f /etc/service/utils.sh ]] && source /etc/service/utils.sh || true

NORDVPN_PROTOCOL=${NORDVPN_PROTOCOL:-UDP}
export NORDVPN_PROTOCOL

NORDVPN_CATEGORY=${NORDVPN_CATEGORY:-P2P}
export NORDVPN_CATEGORY

VPN_PROVIDER_HOME=/etc/service/openvpn/nordvpn
export VPN_PROVIDER_HOME

. /etc/service/date.sh --source-only
# Create a tun device see: https://www.kernel.org/doc/Documentation/networking/tuntap.txt
if [ ! -c /dev/net/tun ]; then
    log "INFO: OVPN: Creating tun interface /dev/net/tun"
    mkdir -p /dev/net
    mknod /dev/net/tun c 10 200
    chmod 600 /dev/net/tun
fi

${VPN_PROVIDER_HOME}/configure-openvpn.sh
nbFiles=$(ls -1 ${VPN_PROVIDER_HOME}/*.ovpn | grep -c ovpn)
confFile=$(ls -1 ${VPN_PROVIDER_HOME}/*.ovpn | grep -v default.ovpn)
echo ########################################################
log "INFO: OVPN: Files found: $nbFiles"
#log "INFO: OVPN: Current load: $LOAD"
#log "INFO: OVPN: Info updated at: $UPDATED_AT"
#log "INFO: OVPN: Server IP: $IP"
log "INFO: OVPN: config: $confFile"
echo ########################################################

if [[ ${nbFiles} -eq 0 ]]; then
    log "ERROR: OVPN: No OpenVPN config found in ${VPN_PROVIDER_HOME}/. Exiting."
    exit 1
fi

## Update ping options to exit the container, so Docker will restart it
sed -i "s/^ping.*//g" "$confFile"
# Add new ones
echo "inactive 3600" >>"$confFile"
echo "ping 10" >>"$confFile"
echo "ping-exit 60" >>"$confFile"
echo -e "management ${SOCKET} unix\nscript-security 2\n--up /etc/service/openvpn/up.sh\n--down /etc/service/openvpn/down.sh" >>"$confFile"
[[ -n ${OPENVPN_LOGLEVEL} ]] && OPENVPN_PARAMETERS=${OPENVPN_PARAMETERS}" --verb ${OPENVPN_LOGLEVEL}" #sed -i "s/verb.*/verb ${OPENVPN_LOGLEVEL}/g" ${destConf}

#Use secrets if present
if [ -e /run/secrets/NORDVPN_LOGIN ]; then
  NORDVPN_LOGIN=$(cat /run/secrets/NORDVPN_LOGIN)
  NORDVPN_PASS=$(cat /run/secrets/NORDVPN_PASS)
fi

if [ -z ${NORDVPN_LOGIN} ] || [ -z ${NORDVPN_PASS} ]; then
  log "ERROR: NORDVPN: **********************"
  log "ERROR: NORDVPN: empty user or password"
  log "ERROR: NORDVPN: **********************"
  exit 1
fi

# add OpenVPN user/pass
if [[ "${NORDVPN_LOGIN}" == "**None**" ]] || [[ "${NORDVPN_PASS}" == "**None**" ]]; then
    if [[ ! -f /config/openvpn-credentials.txt ]]; then
        log "ERROR: OVPN: OpenVPN credentials not set. Exiting."
        exit 1
    fi
    log "INFO: OVPN: Found existing OPENVPN credentials at /config/openvpn-credentials.txt"
else
    log "INFO: OVPN: Setting OpenVPN credentials..."
    mkdir -p /config
    echo "${NORDVPN_LOGIN}" >/config/openvpn-credentials.txt
    echo "${NORDVPN_PASS}" >>/config/openvpn-credentials.txt
    chmod 600 /config/openvpn-credentials.txt
    sed -i "s#auth-user-pass.*#auth-user-pass /config/openvpn-credentials.txt#g" "${confFile}"
    [[ $DEBUG -eq 1 ]] && cat ${confFile} || true
fi

#echo "export LOCAL_NETWORK=${LOCAL_NETWORK}" > /tmp/vars
eval $(/sbin/ip route list match 0.0.0.0 | awk '{if($5!="tun0"){print "GW="$3"\nINT="$5; exit}}')
echo "LOCAL_NETWORK: ${LOCAL_NETWORK}, Gateway: ${GW}, device ${INT}"
if [[ -n ${LOCAL_NETWORK:-""} ]]; then
  if [[ -n ${GW:-""} ]] && [[ -n ${INT:-""} ]]; then
    for localNet in ${LOCAL_NETWORK//,/ }; do
      echo "adding route to local network ${localNet} via ${GW} dev ${INT}"
      /sbin/ip route add "${localNet}" via "${GW}" dev "${INT}"
    done
  fi
fi

openvpn --config ${confFile} ${OPENVPN_PARAMETERS}

log "INFO: OVPN: VPN connection lost, stopping unbound"
log "INFO: OVPN: Waiting ${waitSec} seconds before restarting"
sleep ${waitSec}
